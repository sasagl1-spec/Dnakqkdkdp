from .. import loader, utils
import logging
import asyncio
from typing import List

logger = logging.getLogger(__name__)

@loader.tds
class AutoReactionsMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –∫–∞–∂–¥–æ–µ 40-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    strings = {"name": "AutoReactions40"}

    def __init__(self):
        self.message_count = {}
        self.enabled_chats = set()
        self.reactions = ['ü•µ', 'ü•∞', '‚ù§Ô∏è']  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—á–∏–µ —ç–º–æ–¥–∑–∏
        self.config = loader.ModuleConfig(
            "REACTION_INTERVAL", 40, "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π"
        )

    async def client_ready(self, client, db):
        self._client = client

    def _is_valid_emoji(self, text: str) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏"""
        if not text or len(text) > 2:  # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ 1-2 —Å–∏–º–≤–æ–ª–∞
            return False
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–¥–∞–º Unicode (–∏–∑–±–µ–≥–∞–µ–º —Å–ª–æ–∂–Ω—ã—Ö regex)
        try:
            code = ord(text[0])
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —ç–º–æ–¥–∑–∏
            emoji_ranges = [
                (0x1F600, 0x1F64F), (0x1F300, 0x1F5FF),
                (0x1F680, 0x1F6FF), (0x1F700, 0x1F77F),
                (0x1F780, 0x1F7FF), (0x1F800, 0x1F8FF),
                (0x1F900, 0x1F9FF), (0x1FA00, 0x1FA6F),
                (0x1FA70, 0x1FAFF), (0x02700, 0x027BF),
                (0x024C2, 0x1F251), (0x1F004, 0x1F0CF),
            ]
            
            return any(start <= code <= end for start, end in emoji_ranges)
        except:
            return False

    @loader.watcher(only_messages=True)
    async def watcher(self, message):
        """–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        try:
            chat_id = utils.get_chat_id(message)
            if not chat_id or chat_id not in self.enabled_chats:
                return

            if chat_id not in self.message_count:
                self.message_count[chat_id] = 0
            
            self.message_count[chat_id] += 1

            if self.message_count[chat_id] % self.config["REACTION_INTERVAL"] == 0:
                for reaction in self.reactions:
                    try:
                        await message.react(reaction)
                        await asyncio.sleep(0.5)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é {reaction}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ watcher: {e}")

    async def arstart_cmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        chat_id = utils.get_chat_id(message)
        if not chat_id:
            return await utils.answer(message, "‚ùå –¢–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö")
        
        if chat_id in self.enabled_chats:
            return await utils.answer(message, "‚úÖ –£–∂–µ –≤–∫–ª—é—á–µ–Ω–æ")
        
        self.enabled_chats.add(chat_id)
        await utils.answer(message, f"‚úÖ –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    async def arstop_cmd(self, message):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        chat_id = utils.get_chat_id(message)
        if not chat_id:
            return await utils.answer(message, "‚ùå –¢–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö")
        
        if chat_id not in self.enabled_chats:
            return await utils.answer(message, "‚úÖ –£–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
        
        self.enabled_chats.remove(chat_id)
        await utils.answer(message, f"‚ùå –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    async def arstats_cmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.message_count:
            return await utils.answer(message, "üìä –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        stats = []
        for chat_id, count in self.message_count.items():
            status = "‚úÖ" if chat_id in self.enabled_chats else "‚ùå"
            stats.append(f"{status} –ß–∞—Ç {chat_id}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        await utils.answer(message, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + "\n".join(stats))

    async def arreset_cmd(self, message):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏"""
        self.message_count.clear()
        await utils.answer(message, "‚úÖ –°—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")

    async def arsetinterval_cmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª: .arsetinterval 50"""
        args = utils.get_args_raw(message)
        if not args.isdigit():
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")
        
        interval = int(args)
        if interval < 1:
            return await utils.answer(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª > 0")
        
        self.config["REACTION_INTERVAL"] = interval
        await utils.answer(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–æ–æ–±—â–µ–Ω–∏–π")

    async def arsetreactions_cmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: .arsetreactions üòÇ ü•∫ üëç"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏")
        
        new_reactions = []
        for char in args:
            if self._is_valid_emoji(char) and char not in new_reactions:
                new_reactions.append(char)
        
        if not new_reactions:
            return await utils.answer(message, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–º–æ–¥–∑–∏")
        
        self.reactions = new_reactions
        await utils.answer(message, f"‚úÖ –†–µ–∞–∫—Ü–∏–∏: {''.join(new_reactions)}")

    async def arlist_cmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏"""
        await utils.answer(message, f"üìã –†–µ–∞–∫—Ü–∏–∏: {''.join(self.reactions)}")
