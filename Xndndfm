from .. import loader, utils
import logging
import asyncio

logger = logging.getLogger(__name__)

@loader.tds
class AutoReactionsMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –∫–∞–∂–¥–æ–µ 40-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    strings = {
        "name": "AutoReactions40",
        "status_enabled": "‚úÖ –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {}",
        "status_disabled": "‚ùå –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {}",
        "already_enabled": "‚ö†Ô∏è –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞",
        "already_disabled": "‚ö†Ô∏è –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞",
        "not_in_chat": "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö",
        "stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º:\n{}",
        "no_stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    }

    def __init__(self):
        self.message_count = {}
        self.enabled_chats = set()
        self.reactions = ['ü•µ', 'ü•∞', '‚ù§Ô∏è']
        self.config = loader.ModuleConfig(
            "REACTION_INTERVAL", 40, "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π"
        )

    async def client_ready(self, client, db):
        self._client = client

    @loader.watcher(only_messages=True)
    async def watcher(self, message):
        """–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        chat_id = utils.get_chat_id(message)
        if not chat_id or chat_id not in self.enabled_chats:
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —á–∞—Ç–∞
        if chat_id not in self.message_count:
            self.message_count[chat_id] = 0
        
        self.message_count[chat_id] += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ 40-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if self.message_count[chat_id] % self.config["REACTION_INTERVAL"] == 0:
            try:
                for reaction in self.reactions:
                    await message.react(reaction)
                    await asyncio.sleep(0.5)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–π: {e}")

    async def arstart_cmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        chat_id = utils.get_chat_id(message)
        if not chat_id:
            return await utils.answer(message, self.strings["not_in_chat"])
        
        if chat_id in self.enabled_chats:
            return await utils.answer(message, self.strings["already_enabled"])
        
        self.enabled_chats.add(chat_id)
        await utils.answer(message, self.strings["status_enabled"].format(chat_id))

    async def arstop_cmd(self, message):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        chat_id = utils.get_chat_id(message)
        if not chat_id:
            return await utils.answer(message, self.strings["not_in_chat"])
        
        if chat_id not in self.enabled_chats:
            return await utils.answer(message, self.strings["already_disabled"])
        
        self.enabled_chats.remove(chat_id)
        await utils.answer(message, self.strings["status_disabled"].format(chat_id))

    async def arstats_cmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç–∞–º"""
        if not self.message_count:
            return await utils.answer(message, self.strings["no_stats"])
        
        stats_text = []
        for chat_id, count in self.message_count.items():
            status = "‚úÖ" if chat_id in self.enabled_chats else "‚ùå"
            stats_text.append(f"{status} –ß–∞—Ç {chat_id}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        await utils.answer(message, self.strings["stats"].format("\n".join(stats_text)))

    async def arreset_cmd(self, message):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.message_count.clear()
        await utils.answer(message, "‚úÖ –°—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã")

    async def arsetinterval_cmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: .arsetinterval <—á–∏—Å–ª–æ>"""
        args = utils.get_args_raw(message)
        if not args.isdigit():
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")
        
        new_interval = int(args)
        if new_interval < 1:
            return await utils.answer(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        self.config["REACTION_INTERVAL"] = new_interval
        await utils.answer(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_interval} —Å–æ–æ–±—â–µ–Ω–∏–π")
